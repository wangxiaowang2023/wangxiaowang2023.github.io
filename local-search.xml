<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>这是一个标题</title>
    <link href="/2023/12/23/first/"/>
    <url>/2023/12/23/first/</url>
    
    <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><ul><li>第一个</li><li>第二个</li><li>测试一下</li><li>测测测猜测测测猜测</li><li>test write blog hhh</li></ul>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>标签1</tag>
      
      <tag>标签2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>djangoAdmin部署记录</title>
    <link href="/2023/12/15/djangoAdmin%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/12/15/djangoAdmin%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="部署笔记"><a href="#部署笔记" class="headerlink" title="部署笔记"></a>部署笔记</h1><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><blockquote><p>Python &gt;&#x3D; 3.8.0 (推荐3.9+版本)<br>nodejs &gt;&#x3D; 14.0 (推荐最新)<br>Mysql &gt;&#x3D; 5.7.0 (可选，默认数据库sqlite3，推荐8.0版本)<br>Redis(可选，最新版)</p></blockquote><h2 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h2><h3 id="拉代码部署"><a href="#拉代码部署" class="headerlink" title="拉代码部署"></a>拉代码部署</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">拉代码</span><br>进入后端项目目录:cd backend<br>在项目根目录中，复制 ./conf/env.example.py 文件为一份新的到 ./conf/env.py 下，并重命名为env.py<br>在 env.py 中配置数据库信息(默认数据库为sqlite3，测试演示可忽略此步骤)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker 部署mysql</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker创建数据库 DATABASE_NAME = <span class="hljs-string">&#x27;django-vue-admin&#x27;</span> <span class="hljs-comment"># mysql 时使</span></span><br>安装依赖环境: pip3 install -r requirements.txt<br>如果有碰到mysqlclient 无法安装的时候，查一下手册，mac是要brew install mysql <br>执行迁移命令: python3 manage.py makemigrations python3 manage.py migrate<br>初始化数据: python3 manage.py init<br>初始化省市县数据: python3 manage.py init_area<br>启动项目: python3 manage.py runserver 0.0.0.0:8000<br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker 部署mysql</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker创建数据库 DATABASE_NAME = <span class="hljs-string">&#x27;django-vue-admin&#x27;</span> <span class="hljs-comment"># mysql 时使用</span></span><br><br></code></pre></td></tr></table></figure><h3 id="改验证码逻辑"><a href="#改验证码逻辑" class="headerlink" title="改验证码逻辑"></a>改验证码逻辑</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在 login.py文件的第85行 改</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> self.image_code <span class="hljs-keyword">and</span> ((<br>                                                self.image_code.response == captcha<br>                                                <span class="hljs-keyword">or</span> self.image_code.challenge == captcha<br>                                        ) <span class="hljs-keyword">or</span> captcha.isdigit() <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(captcha) == <span class="hljs-number">6</span>):<br>                    self.image_code <span class="hljs-keyword">and</span> self.image_code.delete()<br>                <span class="hljs-keyword">else</span>:<br>                    self.image_code <span class="hljs-keyword">and</span> self.image_code.delete()<br>                    <span class="hljs-keyword">raise</span> CustomValidationError(<span class="hljs-string">&quot;图片验证码错误&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="再启服务"><a href="#再启服务" class="headerlink" title="再启服务"></a>再启服务</h3><p>执行迁移命令: python3 manage.py makemigrations python3 manage.py migrate<br>初始化数据: python3 manage.py init<br>初始化省市县数据: python3 manage.py init_area<br>启动项目: python3 manage.py runserver 0.0.0.0:8000</p><p>访问地址：[<a href="http://localhost:8000/">http://localhost:8000</a></p><h1 id="前端部署"><a href="#前端部署" class="headerlink" title="前端部署"></a>前端部署</h1><ol><li>进入前端项目目录 <code>cd web</code></li><li>安装依赖 <code>npm install --registry= https://registry.npmmirror.com</code><ol><li>注意一下npm的源 npm config set registry <a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a></li><li>你可以使用以下命令来查看当前npm的下载源设置：npm config get registry</li><li>安装nodejs &gt;&#x3D; 14.0 (推荐最新)</li></ol></li><li>启动服务 <code>npm run dev</code></li></ol><h1 id="访问项目"><a href="#访问项目" class="headerlink" title="访问项目"></a>访问项目</h1><ul><li>访问地址：<a href="http://localhost:8080/">http://localhost:8080 (opens new window)</a>(默认为此地址，如有修改请按照配置文件)</li><li>账号：<code>superadmin</code> 密码：<code>admin123456</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go语言之并发编程基础（goroutine、channel、SELECT）</title>
    <link href="/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%EF%BC%88goroutine%E3%80%81channel%E3%80%81SELECT%EF%BC%89/"/>
    <url>/2023/12/07/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%EF%BC%88goroutine%E3%80%81channel%E3%80%81SELECT%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h1><h2 id="go中的串行和并行还有并发的概念"><a href="#go中的串行和并行还有并发的概念" class="headerlink" title="go中的串行和并行还有并发的概念"></a>go中的串行和并行还有并发的概念</h2><ul><li>串行（Sequential）：<ul><li>串行是一种<strong>执行方式</strong>，串联行走，按照顺序逐一的执行任务或者操作，</li><li>在串行执行中，每个任务必须等待前一个任务执行完了之后才能开始执行</li><li>场景：串行执行通常用于单核或者单线程环境，其中一次只能执行一个任务，意味着任务要找现行顺序执行，一个接一个，直到所有的任务都完成</li><li>串行执行通常具有可预测行，因为任务的执行顺序是确定的，</li><li>缺点就是在多核系统中，无法充分的利用硬件资源</li></ul></li><li>并行（Parallel）：<ul><li>并行也是一种<strong>执行方式</strong> ，</li><li>多个任务或者操作可以同时的执行，不必等待前一个任务完成，</li><li>充分利用多核处理器或者多线程环境的优势</li></ul></li><li>并发（Concurrency）：<ul><li>并发是一个更广泛的<strong>概念</strong>，在同一时间段内处理多个任务，但不一定要求同时执行。在并发中，任务可以交替执行，每个任务都有自己的执行周期，并发通常涉及的是多个独立的执行线程、进程或者协程。</li><li>并发不一定需要多核处理器，它可以在单核处理器上模拟通过快速切换执行线程来实现。</li><li>并发通常用于提高系统的吞吐量、资源利用率和响应性，特别是IO密集型应用中。</li><li>并发任务之间可能需要协调、同步和共享数据，因此需要小心处理并发问题，如竞争条件和死锁等</li></ul></li><li>总结：<ul><li>串行是指按顺序执行任务的方法，不涉及多个任务之间的交替执行</li><li>并行是多个任务同时执行的方式，通常需要多核处理器或多线程环境</li><li>并发是多个任务在同一时间段内处理的方式，可以是交替执行，通常涉及多线程或协程、并需要处理并发相关问题。</li></ul></li></ul><h2 id="【拓展】并发模型"><a href="#【拓展】并发模型" class="headerlink" title="【拓展】并发模型"></a>【拓展】并发模型</h2><ul><li>主流并发模型无外乎三种<ul><li>1、多线程：每个线程一次处理一个请求，线程越多可并发处理的请求数就越多，<ul><li>但是在高并发下，多线程的开销会比较大</li></ul></li><li>2、协程：无需抢占式的调度，开销小，可以有效的提高线程的并发性，从而避免了线程的缺点那部分</li><li>3、基于异步回调的IO模型：异步编程，当遇到密集IO的时候，等待，让其他程序继续跑</li></ul></li></ul><h2 id="goroutine的基本概念"><a href="#goroutine的基本概念" class="headerlink" title="goroutine的基本概念"></a>goroutine的基本概念</h2><ul><li><strong>概念</strong>：是一种<strong>轻量级的线程</strong>，用于执行程序并发任务，与传统线程相比，goroutines更加轻量且消耗更少，</li></ul><p><em>routine:常规；例行程序；日常工作</em></p><p>与创建线程相比，创建成本和开销都很小，每个goroutine的堆栈只有几kb，并且堆栈可根据程序的需要增长和缩小（线程的堆栈是需要指明和固定的），所以go语言从语言层面就支持高并发。</p><ul><li>并发执行：多个goroutines可以同时运行，且不需要显式的线程管理，有助于充分利用多核处理器，提高程序的性能</li><li>轻量级：goroutines比传统线程更轻量。这个轻量可以通俗理解为创建和销毁他们的成本很低，通常数百上千的goroutines可以在同一个程序中运行而不会引发性能问题</li><li>并发通信：goruntines之间的可以通过通道（channel）进行安全的并发通信，通道是goroutines之间交换数据的一种机制，避免了竞争条件和协调任务</li><li>并发模型：Go 语言的并发模型是基于 CSP（Communicating Sequential Processes）的，它强调通过通信来共享数据，而不是共享数据来通信。这种模型使并发编程更加安全和可维护。</li><li>如何<strong>启动 goroutine</strong>：要启动一个goroutine，只需要在函数或方法调用前加上关键字’go’ 即可创建一个新的goroutine来执行该函数，程序继续执行后续任务，而不会等待goroutine完成</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 启动一个 Goroutine 执行 hello 函数</span><br>    <span class="hljs-keyword">go</span> hello()<br><br>    <span class="hljs-comment">// 主线程继续执行其他任务</span><br>    fmt.Println(<span class="hljs-string">&quot;Main function&quot;</span>)<br><br>    <span class="hljs-comment">// 等待一段时间以确保 Goroutine 有足够的时间执行</span><br>    time.Sleep(time.Second)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Hello, Goroutine!&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>程序执行的背后：当程序启动的时候，只有一个goroutine来调用main函数，可以理解为主goroutine，新的goroutine通过go语句进行创建</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DelayPrint</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span>; i++ &#123;<br>time.Sleep(<span class="hljs-number">250</span> * time.Millisecond)<br>fmt.Println(i)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HelloWorld</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Hello world goroutine&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">go</span> DelayPrint()    <span class="hljs-comment">// 开启第一个goroutine</span><br><span class="hljs-keyword">go</span> HelloWorld()    <span class="hljs-comment">// 开启第二个goroutine</span><br>time.Sleep(<span class="hljs-number">2</span>*time.Second)<br>fmt.Println(<span class="hljs-string">&quot;main function&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><em>tips：DelayPrint里面的sleep ，会导致第二个goroutine阻塞或者等待吗？</em><ul><li>答案肯定是不会</li></ul></li><li>当程序执行go func()的时候，只是简单的调用然后就立即返回了，并不关心函数内部发生的事情，所以不同的goroutine直接不影响，main会继续按顺序执行语句，所以两个go rountine同时在跑，但是肯定是第一个gorounine先执行</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;<br>fmt.Println(<span class="hljs-string">&quot;hello&quot;</span>)<br>fmt.Printf(<span class="hljs-string">&quot;这是sayHello函数内打印的第%v次\n&quot;</span>, i)<br>time.Sleep(time.Millisecond * <span class="hljs-number">100</span>) <span class="hljs-comment">// 暂停等待100毫秒</span><br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sayWorld</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;<br>fmt.Println(<span class="hljs-string">&quot;world&quot;</span>)<br>fmt.Printf(<span class="hljs-string">&quot;这是sayWorld函数内打印的第%v次\n&quot;</span>, i)<br>time.Sleep(time.Millisecond * <span class="hljs-number">100</span>) <span class="hljs-comment">// 暂停等待100毫秒</span><br><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// sayHello()</span><br><span class="hljs-keyword">go</span> sayHello() <span class="hljs-comment">//在函数前面加一个go关键字就将这个函数单独的放在一个Goroutine中执行，与主Goroutine并行执行</span><br><span class="hljs-keyword">go</span> sayWorld()<br>fmt.Println(<span class="hljs-string">&quot;这句话先走还是后走&quot;</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;<br>fmt.Println(<span class="hljs-string">&quot;yes&quot;</span>)<br>fmt.Printf(<span class="hljs-string">&quot;这是main函数内打印的第%v次\n&quot;</span>, i)<br>time.Sleep(time.Millisecond * <span class="hljs-number">100</span>) <span class="hljs-comment">// 暂停等待100毫秒</span><br>&#125;<br><br><span class="hljs-comment">// time.Sleep(time.Second)</span><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出内容如下：</span><br><span class="hljs-comment">这句话先走还是后走</span><br><span class="hljs-comment">yes</span><br><span class="hljs-comment">这是main函数内打印的第0次</span><br><span class="hljs-comment">world</span><br><span class="hljs-comment">这是sayWorld函数内打印的第0次</span><br><span class="hljs-comment">hello</span><br><span class="hljs-comment">这是sayHello函数内打印的第0次</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>这里从输出内容看得出来，当程序碰到go func()的时候，并不管go func()的内容，直接就去执行后面的代码了</li></ul><h2 id="通道（channel）"><a href="#通道（channel）" class="headerlink" title="通道（channel）"></a>通道（channel）</h2><p>概念：</p><ul><li>通道是什么：是一种数据结构，所以通道可以用var 来声明数据的类型的</li><li>干什么？：通道是一种在goroutines之间传递的数据结构，它类似于一个<strong>队列</strong>，同于在通道与通道之间<strong>发送和接收数据的</strong></li><li>通道的类型：道中传递的数据必须与通道的类型匹配。通道类型使用 <code>chan</code> 关键字，如 <code>chan int</code> 表示一个整数类型的通道。</li><li>发送和接收：通道的基本操作有发送（<code>send</code>）和接收（<code>receive</code>）。通过通道发送数据时，数据会被发送到通道，然后可以在另一个 Goroutine 中接收。</li><li>阻塞：当发送或接收操作发生时，它们可能会<strong>阻塞</strong>当前 Goroutine，直到有另一个 Goroutine 准备好接收或发送数据。这有助于同步不同 Goroutines 之间的操作。<ul><li><strong>从channel中读取数据，如果channel之前没有写入数据，也会导致阻塞，直到channel中被写入数据为止</strong></li></ul></li></ul><p>强调一下：</p><ul><li>通道是在传递数据，而不是在赋值数据，当通道A 体内的数据，传给了B的时候，A就没有数据了，就空了，B就接收到了B就有了</li></ul><p>接收操作（<code>&lt;-channel</code>）、发送操作（<code>channel &lt;- data</code>）或关闭操作（<code>close(channel)</code>）。</p><p>声明：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> ch <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>      <span class="hljs-comment">// 声明一个传递int类型的channel</span><br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>) <span class="hljs-comment">// 使用内置函数make()定义一个channel</span><br><br>ch &lt;- value          <span class="hljs-comment">// 将一个数据value写入至channel，这会导致阻塞，直到有其他goroutine从这个channel中读取数据</span><br>value := &lt;-ch        <span class="hljs-comment">// 从channel中读取数据，如果channel之前没有写入数据，也会导致阻塞，直到channel中被写入数据为止</span><br><span class="hljs-comment">//=========</span><br><span class="hljs-built_in">close</span>(ch)            <span class="hljs-comment">// 关闭channel</span><br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br>fmt.Println(<span class="hljs-built_in">len</span>(c))  <span class="hljs-comment">// 通道内实际使用长度，</span><br>fmt.Println(<span class="hljs-built_in">cap</span>(c))  <span class="hljs-comment">// 通道的容积长度，</span><br><br></code></pre></td></tr></table></figure><p>类型：通道理论上来说可以分2种</p><ul><li><p>无缓冲通道和缓冲通道</p></li><li><p>无缓冲通道：无缓冲通道上的<strong>发送</strong>操作将会被阻塞，<strong>直到</strong>另一个goroutine在对应的通道上执行<strong>接收</strong>操作，此时值才传送完成，两个Goroutine都继续执行（发送时阻塞，直到接收才会畅通继续） </p><ul><li>定义的时候，不给大小就是一个无缓冲通道了，ch:&#x3D;make(chan int) int<strong>后面不设容量</strong></li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> done <span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span> <span class="hljs-comment">//：这里声明了一个名为 done 的布尔类型通道 用来进行通道之间数据通讯</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HelloWorld</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot; hello world channel&quot;</span>) <span class="hljs-comment">//打印，这里注意下，下面有用</span><br>time.Sleep(time.Millisecond * <span class="hljs-number">500</span>)  <span class="hljs-comment">// 等待500ms</span><br>done &lt;- <span class="hljs-literal">true</span>                        <span class="hljs-comment">// 这里是向done这个channel 发送数据，发送的内容是 true 因为他是一个bool类型的channel 注意，发送数据的时候将会阻塞</span><br>&#125;<br><br><span class="hljs-comment">// func main() &#123;</span><br><span class="hljs-comment">// done = make(chan bool) //  创建一个bool类型的channel 名字叫done 这个通道将用于等待helloWorld函数的完成 分配内存了</span><br><span class="hljs-comment">// go HelloWorld() //启动一个新的goroutine 用来执行helloWorld函数</span><br><span class="hljs-comment">// &lt;-done  // 接收操作，它从 done 通道接收数据</span><br><span class="hljs-comment">// 这个操作会阻塞，直到 HelloWorld 函数发送数据到 done 通道。一旦数据到达，程序将继续执行，然后退出</span><br><span class="hljs-comment">// 如果没有发送和接收通道的操作，那么主goroutine函数main将不会等待goroutine函数helloWorld直接完成就会直接退出mian结束</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)   <span class="hljs-comment">// make就是创建了一个channel类型没有容量（无缓冲）类型的变量名称为ch  后面没设置缓冲通道的大小，就是无缓冲 分配内存了 </span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ch <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)</span></span> &#123; <span class="hljs-comment">// func匿名函数，go是表示他是goroutine 入参是无缓冲channel类型，</span><br>fmt.Println(&lt;-ch) <span class="hljs-comment">// 使用&lt;-channel来接收channel类型 作用是冲通道ch接收数据，并且答应出来，接收到的是多少就打印多少</span><br>&#125;(ch)<br>ch &lt;- <span class="hljs-number">10</span> <span class="hljs-comment">//主函数main将整数10发送到ch通道中，使用&lt;- 用来发送和接收 &lt;-左边是channel就代表想ch发送，&lt;-右边是ch就代表在接收channel</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">总体来说，这段代码的主要目的是创建一个通道 ch，然后启动一个协程，</span><br><span class="hljs-comment">该协程从通道 ch 中接收数据并将其打印到标准输出。</span><br><span class="hljs-comment">同时，主函数将整数值 10 发送到通道 ch 中。由于通道是无缓冲的，</span><br><span class="hljs-comment">这个发送操作会导致协程解除阻塞，接收并打印值 10。因此，你会在标准输出中看到 &quot;10&quot;。这个示例展示了 Go 语言中的并发和通道的基本使用。</span><br><span class="hljs-comment">*/</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通道可以用来连接goroutine，这样一个的输出是另一个输入。这就叫做管道。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> echo <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> receive <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Echo</span><span class="hljs-params">()</span></span> &#123;<br>time.Sleep(time.Microsecond * <span class="hljs-number">500</span>)<br>echo &lt;- <span class="hljs-string">&quot;咖啡色的羊驼&quot;</span> <span class="hljs-comment">// 这里在向echo这个通道发送数据</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Receive</span><span class="hljs-params">()</span></span> &#123;<br>temp := &lt;-echo <span class="hljs-comment">// 接收echo通道传过来的数据 这里会阻塞，等待数据传输结束后，</span><br>receive &lt;- temp <span class="hljs-comment">// 将temp接收过来的通道数据，传给receive，</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>echo = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br>receive = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br><br><span class="hljs-keyword">go</span> Echo()<br><span class="hljs-keyword">go</span> Receive()<br>getStrt := &lt;-receive  <span class="hljs-comment">// 接收 receive 通道传过来的数据 </span><br>fmt.Println(getStrt) <br>&#125;<br><span class="hljs-comment">// 在这里不一定要去关闭channel，因为底层的垃圾回收机制会根据它是否可以访问来决定是否自动回收它。(这里不是根据channel是否关闭来决定的)</span><br></code></pre></td></tr></table></figure><ul><li>单向通道：<ul><li>单向就是指限制一头通信，比如限制仅接收，或者限制仅发送数据</li><li>双向通道可以修改为单向通道，反之不行</li><li>当程序则够复杂的时候，为了代码可读性更高，拆分成一个一个的小函数是需要的。</li></ul></li></ul><p>goroutine的通道默认是阻塞的，那么有什么办法可以去缓解阻塞呢：？</p><p><em>答案：加一个缓冲区</em></p><ul><li>缓冲通道： 一个有容量的通道，可以定义他的容积大小。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">// 创建了缓冲区为3的通道</span><br><br><span class="hljs-comment">//=========</span><br><span class="hljs-built_in">len</span>(ch)   <span class="hljs-comment">// 长度计算</span><br><span class="hljs-built_in">cap</span>(ch)   <span class="hljs-comment">// 容量计算</span><br><br></code></pre></td></tr></table></figure><p><img src="/img/channel.png" alt="channel"></p><ul><li><strong>当他体内的容积被塞满后，就会阻塞</strong> ，就会死锁</li><li>必须要让通道体内元素个数不大于其设定的容积大小，不然就会报错</li></ul><p>通道有点类似于python的锁一样，谁拿到这个锁，谁就可以操作数据，通道就是谁进去了这个通道，谁就可以操作这个通道内的数据，当这个通道内塞满了的时候，就关门了，进不去了。</p><ul><li>对通道循环取值：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 对channel循环取值</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ch1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">100</span>) <span class="hljs-comment">// 给ch1这个变量分配了内存（实例化了） 是一个chan，里面的内容是int类型，100个空间</span><br>time.Sleep(time.Millisecond * <span class="hljs-number">100</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">100</span>; i++ &#123;<br>ch1 &lt;- i <span class="hljs-comment">// 往这个ch1里面塞数据，把i塞进去了</span><br>&#125;<br><span class="hljs-built_in">close</span>(ch1) <span class="hljs-comment">// 注意要关闭通道</span><br><span class="hljs-comment">// 方式 1 </span><br><br><span class="hljs-comment">// for &#123;</span><br><span class="hljs-comment">// a, err := &lt;-ch1</span><br><span class="hljs-comment">// if !err &#123;</span><br><span class="hljs-comment">// return</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// fmt.Println(a)</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// 方式 2 </span><br><span class="hljs-keyword">for</span> a := <span class="hljs-keyword">range</span> ch1 &#123;<br>fmt.Println(a)<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="goroutine-阻塞死锁和友好退出"><a href="#goroutine-阻塞死锁和友好退出" class="headerlink" title="goroutine 阻塞死锁和友好退出"></a>goroutine 阻塞死锁和友好退出</h2><h3 id="锁："><a href="#锁：" class="headerlink" title="锁："></a>锁：</h3><p>锁用来控制并发访问共享资源的一种同步机制避免多个goroutine同事访问和修改相同的数据，从而导致数据竞争或者不一致的状态，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-comment">// 锁的概念与理解</span><br><span class="hljs-comment">// 先创建一个阻塞</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//func main() &#123;</span><br><span class="hljs-comment">//ch1 := make(chan int) // 创建了一个通道ch1 它是个无缓冲通道，容积是0，体内目前数据也是0</span><br><span class="hljs-comment">//&lt;-ch1 //把ch1体内的数据给出去，但是这个时候ch1体内是没数据的，就阻塞（deadlock死锁）了，这个时候阻塞的main函数goroutine ，通道被锁了</span><br><span class="hljs-comment">//// 提示：fatal error: all goroutines are asleep - deadlock!所有的goroutine都睡眠阻塞了，</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">// func main() &#123;</span><br><span class="hljs-comment">// ch1, ch2 := make(chan int), make(chan int) // 创建了两个通道，无缓冲的</span><br><span class="hljs-comment">// go func() &#123;</span><br><span class="hljs-comment">// ch1 &lt;- 1 // 往ch1里面塞了个1</span><br><span class="hljs-comment">// ch2 &lt;- 0 // ch2 里面也塞了个0</span><br><br><span class="hljs-comment">// &#125;() //后面加括号是表示返回值</span><br><br><span class="hljs-comment">// &lt;-ch2 // 把ch2的数据取走，</span><br><span class="hljs-comment">// // 这样运行会阻塞（deadlock死锁），因为往ch1里面塞了一个数据，</span><br><span class="hljs-comment">// // 但是ch1是个无缓冲的通道，现在他的体内被塞了一个数据，如果不把这个数据取走，就会阻塞，</span><br><span class="hljs-comment">// // 反之，ch2的数据被取走了，他体内的数据回到了定义的容积0个，所以它没有阻塞，</span><br><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// 接下来解锁思路 方式一，把体内数据给出去，让体内数据回到之前定义的大小</span><br><span class="hljs-comment">// func main() &#123;</span><br><span class="hljs-comment">// ch1, ch2 := make(chan int), make(chan int) // 创建了两个通道，无缓冲的</span><br><span class="hljs-comment">// go func() &#123;</span><br><span class="hljs-comment">// ch1 &lt;- 1 // 往ch1里面塞了个1</span><br><span class="hljs-comment">// ch2 &lt;- 0 // ch2 里面也塞了个0</span><br><br><span class="hljs-comment">// &#125;() //后面加括号是表示返回值</span><br><span class="hljs-comment">// &lt;-ch1 //  解锁思路，把ch1的数据也取走给出去，ch1就回到了体内数据为0的状态，这个时候就没阻塞了</span><br><span class="hljs-comment">// &lt;-ch2 // 把ch2的数据取走，</span><br><span class="hljs-comment">// // 这样运行会阻塞，因为往ch1里面塞了一个数据，</span><br><span class="hljs-comment">// // 但是ch1是个无缓冲的通道，现在他的体内被塞了一个数据，如果不把这个数据取走，就会阻塞，</span><br><span class="hljs-comment">// // 反之，ch2的数据被取走了，他体内的数据回到了定义的容积0个，所以它没有阻塞，</span><br><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// 接下来解锁思路 方式二，把体内容积扩容，</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ch1, ch2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">1</span>), <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>) <span class="hljs-comment">// 创建了两个通道，无缓冲的</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>ch1 &lt;- <span class="hljs-number">1</span> <span class="hljs-comment">// 往ch1里面塞了个1 ,这个时候ch1体内数据1小于其容积2，所以不会阻塞</span><br>ch2 &lt;- <span class="hljs-number">0</span> <span class="hljs-comment">// ch2 里面也塞了个0，这个时候ch2体内数据1大于其容积1，如果不把体内数据给出去就会阻塞</span><br><br>&#125;() <span class="hljs-comment">//后面加括号是表示返回值</span><br><span class="hljs-comment">// &lt;-ch1 //  解锁思路，把ch1的数据也取走给出去，ch1就回到了体内数据为0的状态，这个时候就没阻塞了</span><br>&lt;-ch2 <span class="hljs-comment">// 把ch2的数据取走， 这个时候ch2的体内数据回到0，等于其容积，所以不会阻塞</span><br><span class="hljs-comment">// 这样运行会阻塞，因为往ch1里面塞了一个数据，</span><br><span class="hljs-comment">// 但是ch1是个无缓冲的通道，现在他的体内被塞了一个数据，如果不把这个数据取走，就会阻塞，</span><br><span class="hljs-comment">// 反之，ch2的数据被取走了，他体内的数据回到了定义的容积0个，所以它没有阻塞，</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="SELECT-CASE-多路复用"><a href="#SELECT-CASE-多路复用" class="headerlink" title="SELECT + CASE 多路复用"></a>SELECT + CASE 多路复用</h2><ul><li>select语句用于处理并发操作中的多个通道操作，它可以让你同事等待多个通道，并在其中任意一个通道就绪时执行对象的操作</li><li>与switch case语句类似，他有一系列的case分支和一个默认的分支，</li><li>每个分支case<strong>都会对应一个通道的通信</strong>（发送或者接收）过程，select会一直等待，直到某个case的通信操作完成时，就会执行case分支对应的语句，</li><li>如果多个case同时满足，select会<strong>随机</strong>选择一个去运行，</li><li>如果没有满足的case，<strong>则一直等待直到</strong>最后执行default分支，</li><li>如果没有任何通道就绪，<strong>且没有default子句，则sselect语句会阻塞</strong>，直到至少有一个通道就绪。</li><li>select应用场景一：多路复用，通讯，同时监听多个通道，一旦某个通道可以进行读写操作，对应的case语句就会被执行。这种方式可以有效实现多个并发任务之间的协调和同步</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ch1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">1</span>)<br>ch2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">100</span>)<br><span class="hljs-comment">// ch1 &lt;- 1</span><br><span class="hljs-comment">// select &#123;</span><br><span class="hljs-comment">// case a := &lt;-ch1:</span><br><span class="hljs-comment">// fmt.Println(&quot;走了第一条，如果ch1里面有元素发送给a的情况下，才会走这条路&quot;, a)</span><br><span class="hljs-comment">// case ch1 &lt;- 5:</span><br><span class="hljs-comment">// fmt.Println(&quot;走了第二条，往ch1里面发送一个元素，如果ch1有位置塞数据的话，就会走这条路&quot;)</span><br><span class="hljs-comment">// default:</span><br><span class="hljs-comment">// fmt.Println(&quot;这是最后一条，如果以上都不满足，就会走这里来。&quot;)</span><br><span class="hljs-comment">// &#125;</span><br>ch2 &lt;- <span class="hljs-number">1</span><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> a := &lt;-ch1: <span class="hljs-comment">// 把ch1里的数据发送给a，如果ch1里有数据的话，如果没有就不会触发这条判断</span><br>fmt.Println(<span class="hljs-string">&quot;第一条&quot;</span>, a)<br><span class="hljs-keyword">case</span> ch1 &lt;- <span class="hljs-number">19</span>: <span class="hljs-comment">// ch1接收发送给他的数据19 ， 如果ch1里面还有空位的话，就会触发这一条判断</span><br>fmt.Println(<span class="hljs-string">&quot;走了第二条&quot;</span>)<br><span class="hljs-keyword">case</span> ch2 &lt;- <span class="hljs-number">20</span>: <span class="hljs-comment">// ch2接收发送给他的数据20，如果ch2里面还有空位的话，就会触发这一条判断</span><br>fmt.Println(<span class="hljs-string">&quot;走了第三条&quot;</span>)<br><span class="hljs-keyword">case</span> b := &lt;-ch2: <span class="hljs-comment">// 将ch2里面的数据发送出来给到b，如果ch2里面有数据化，就会触发这一条</span><br>fmt.Println(<span class="hljs-string">&quot;走了第四条&quot;</span>, b)<br><span class="hljs-keyword">default</span>: <span class="hljs-comment">// 注意下，如果上面的通道都无法满足，且没有定义default，那么select就会阻塞 报错select case must be receive, send or assign recv</span><br>fmt.Println(<span class="hljs-string">&quot;都走不通，就会走这条&quot;</span>)<br>&#125;<br><span class="hljs-comment">// 上面这段代码判断里面,第二条第三条第四条都会满足条件，所以会在这三条判断里面随机走一条</span><br>    <span class="hljs-comment">// 如果没有运行case,就会阻塞事件发送报错（死锁）</span><br>    <span class="hljs-comment">// fatal error: all goroutines are asleep - deadlock!</span><br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><ul><li>select 应用的场景二：超时处理，结合selcet和time.After函数，事件对某个操作的超时控制，当某个操作超过一定时间没有完成时，可以执行响应的超时处理逻辑，一下两断代码一个基础版一个简单版的，：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 我们开解析下这段代码</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>timeOut := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>, <span class="hljs-number">1</span>) <span class="hljs-comment">// 定义timeOut为chan，内部类型为bool，容积为1，且分配内存（创建timeOut这个通道） </span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;   <span class="hljs-comment">// func()&#123;代码块&#125;()创建匿名函数</span><br>time.Sleep(time.Second * <span class="hljs-number">1</span>) <span class="hljs-comment">//sleep睡1秒钟</span><br>timeOut &lt;- <span class="hljs-literal">true</span> <span class="hljs-comment">// 往timeOut这个通道发送一个数据，数据是ture  （bool）</span><br>&#125;()<br>ch1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>) <span class="hljs-comment">// / 定义timeOut为chan，内部类型为int，容积为0，无缓冲通道，且分配内存（创建timeOut这个通道） </span><br><span class="hljs-keyword">select</span> &#123; <span class="hljs-comment">//select case</span><br><span class="hljs-keyword">case</span> &lt;-ch1: <span class="hljs-comment">// 第一个case 将ch1通道里面的数据发出来，但是ch1里面是空的，所以没东西发出来所以不会走这条case</span><br><span class="hljs-keyword">case</span> &lt;-timeOut: <span class="hljs-comment">// 第二个case，把timeOut通道里面的数据发出来，因为timeOut里面有个ture这个数据，所以满足，会走这条case </span><br>fmt.Println(<span class="hljs-string">&quot;超时了，走了这一步&quot;</span>) <span class="hljs-comment">// </span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>下面这个是常用的简化版的</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs GO"><span class="hljs-comment">// 简化写一个通俗版，这段代码原理和上面类型，但有个小技巧，我们解读一下</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ch1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">1</span>) <span class="hljs-comment">// 创建ch1通道，容积为0</span><br>ch1 &lt;- <span class="hljs-number">8</span><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ch1: <span class="hljs-comment">// 从ch1通道读取数据（把ch1的数据发送出来），ch1为空，不满足该判断</span><br>fmt.Println(<span class="hljs-string">&quot;没有超时就会走这条路&quot;</span>)<br><span class="hljs-keyword">case</span> &lt;-time.After(time.Second * <span class="hljs-number">1</span>): <span class="hljs-comment">// 这里会有疑问的：因为这里的函数time.After()的返回值就是一个有数据的通道，所以满足该case判断</span><br><span class="hljs-comment">// 翻看源码就知道：func After(d Duration) &lt;-chan Time &#123;return NewTimer(d).C &#125;返回的是一个chan类型 Time</span><br>fmt.Println(<span class="hljs-string">&quot;超时1秒且走了这条路&quot;</span>)<br><span class="hljs-comment">// 这里要注意一下，time.After必须要等待时间结束后才会返回一个chan，如果在等待时间内，有其他case满足了，就会去运行其他case.</span><br><br>&#125;<br><span class="hljs-comment">// ch1 &lt;- 8 // 我们试一下往这个ch1里塞一个数据，让他满足第一个case的判断。在Second*1的时间内。满足了第一个case，所以不会运行打印第二个case的内容</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>select 场景三：非阻塞通信，通过定义default语句，实现非阻塞的通信操作，当没有任何通信操作可以立即进行时，default语句会被执行，可以写一下默认逻辑。（判断channel是否阻塞(或者说channel是否已经满了)）</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ch := <span class="hljs-built_in">make</span> (<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">1</span>)  <span class="hljs-comment">// 注意这里给的容量是1</span><br>ch &lt;- <span class="hljs-number">1</span><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> ch &lt;- <span class="hljs-number">2</span>:<br><span class="hljs-keyword">default</span>: <span class="hljs-comment">// 走到这里说明select case阻塞了，因为通道满了</span><br>fmt.Println(<span class="hljs-string">&quot;通道channel已经满啦，塞不下东西了!&quot;</span>) <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>slelect场景四：.退出机制</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 解读下这段代码</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>i := <span class="hljs-number">0</span>                      <span class="hljs-comment">// 初始化i 值为1</span><br>ch1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">0</span>) <span class="hljs-comment">// 创建一个通道，内容为字符串，容积为0</span><br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;              <span class="hljs-comment">// defer main函数结束的时候执行这个方法</span><br><span class="hljs-built_in">close</span>(ch1) <span class="hljs-comment">// 关闭通道</span><br>&#125;()<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-comment">// goroutine执行匿名方法</span><br>DONE: <span class="hljs-comment">// DONE:只是在打标签，标记一下循环开始了，没有实际作用</span><br><span class="hljs-keyword">for</span> &#123;<br>time.Sleep(time.Second * <span class="hljs-number">1</span>) <span class="hljs-comment">// 暂停一秒</span><br><span class="hljs-comment">// fmt.Println(time.Now().Unix()) // 打印Unix时间戳</span><br>fmt.Println(time.Now().UTC()) <span class="hljs-comment">// 打印UTC国际标准时间</span><br>i++                           <span class="hljs-comment">// 循环一次 加等与1</span><br><br><span class="hljs-keyword">select</span> &#123; <span class="hljs-comment">// 开启select case</span><br><span class="hljs-keyword">case</span> m := &lt;-ch1: <span class="hljs-comment">// 将ch1里面的数据给m变量，但是ch1里是空的，所以不会触发这个</span><br>fmt.Println(<span class="hljs-string">&quot;打印ch1里面的内容 :&quot;</span>, m) <span class="hljs-comment">// 打印接收通道数据的m,就是下面的stop会被塞进来</span><br><span class="hljs-comment">// 这里的DONE也是一个意思标记一下循环从这里结束，收尾呼应</span><br><span class="hljs-keyword">break</span> DONE <span class="hljs-comment">// 当这个通道里面有内容时，结束这个无限循环</span><br><span class="hljs-keyword">default</span>: <span class="hljs-comment">// 没有通道满足case，触发default 打印下面的话</span><br>fmt.Println(<span class="hljs-string">&quot;以上买满足的条件&quot;</span>)<br>&#125;<br>&#125;<br>&#125;()<br>time.Sleep(time.Second * <span class="hljs-number">5</span>)   <span class="hljs-comment">// 会一直等5秒，但是等待的时候，go func匿名函数里面的死循环会一直去循环</span><br>ch1 &lt;- <span class="hljs-string">&quot;stop,塞进通道里面去&quot;</span>         <span class="hljs-comment">// 五秒结束，往 ch1通道里面塞了一个数据 &quot;stop&quot; , ch1里面塞数据的时候，等待到无限循环里面就会被终止的</span><br>fmt.Println(<span class="hljs-string">&quot;看一下这段代码在什么时候执行&quot;</span>) <span class="hljs-comment">// 这个是在循环结束后才会执行</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>强调一下： 要跳出循环，一定要用break+ 具体标记，或者goto 标记也可以，否则其实不是真的退出，因为在goroutine里面，会不停地跑</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>i := <span class="hljs-number">0</span><br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-built_in">close</span>(ch)<br>&#125;()<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-keyword">for</span> &#123;<br>time.Sleep(<span class="hljs-number">1</span>*time.Second)<br>fmt.Println(time.Now().Unix())<br>i++<br><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> m := &lt;-ch:<br><span class="hljs-built_in">println</span>(m)<br><span class="hljs-keyword">goto</span> DONE <span class="hljs-comment">// 跳出 select 和 for 循环</span><br><span class="hljs-keyword">default</span>:<br>&#125;<br>&#125;<br>DONE:<br>&#125;()<br><br>time.Sleep(time.Second * <span class="hljs-number">4</span>)<br>ch&lt;-<span class="hljs-string">&quot;stop&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>锁是一种同步机制，用于控制对共享资源的访问，确保一次只有一个goroutine可以反问共享资源。</p><p>锁有两种状态：锁定和解锁，一旦有一个goroutine获得了锁，那其他goroutines将被阻塞。直到锁被释放</p><p>锁：互斥锁、读写锁</p><h2 id="锁（互斥锁）简单解析"><a href="#锁（互斥锁）简单解析" class="headerlink" title="锁（互斥锁）简单解析"></a>锁（互斥锁）简单解析</h2><p>互斥锁：在并发执行时，多个goroutine同事读写一个数据，就会造成数据的读写混乱，</p><p>解决方式：加锁，加互斥锁，</p><p>方式：控制对共享资源的访问，让它可以却道在任何给定的时刻都只有一个线程或者说goroutine能够访问到被保护的临界区。 </p><p>每一个</p><p>channel通道是解决协程同步，锁是解决协程（线程）访问资源优先性，</p><p>使用互斥锁时一定要注意，对资源（文件、数据等）操作完成</p><p>弊端：加了互斥锁之后，并发就变成了串行了，或者说，走到此处时，是串行，牺牲了效率，但是保证了数据安全性</p><h3 id="互斥锁等待组"><a href="#互斥锁等待组" class="headerlink" title="互斥锁等待组"></a>互斥锁等待组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> x <span class="hljs-type">int</span>             <span class="hljs-comment">// 定义了一个整形变量</span><br><span class="hljs-keyword">var</span> wg sync.WaitGroup <span class="hljs-comment">// 定义了一个等待组WaitGroup</span><br><span class="hljs-keyword">var</span> lock sync.Mutex   <span class="hljs-comment">// 定义了一个Mutex互斥锁</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++ &#123;<br>lock.Lock() <span class="hljs-comment">// 开启锁</span><br>fmt.Println(<span class="hljs-string">&quot;x开始前为=&quot;</span>, x)<br>x++<br>fmt.Println(<span class="hljs-string">&quot;x此时为=&quot;</span>, x)<br>lock.Unlock() <span class="hljs-comment">// 关闭锁</span><br>&#125;<br>wg.Done() <span class="hljs-comment">// 通知等待组wg完成了</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;x=&quot;</span>, x)<br>wg.Add(<span class="hljs-number">2</span>) <span class="hljs-comment">// 等待组添加了2个 就是把两个goroutine放进等待组里面，他们两个在抢锁</span><br><span class="hljs-comment">// 两个add方法都在同时运行，但是只有一把锁，谁拿到了锁就是谁在执行x++的这个操作</span><br><span class="hljs-keyword">go</span> add()<br><span class="hljs-keyword">go</span> add()<br><span class="hljs-comment">// go add()</span><br>wg.Wait() <span class="hljs-comment">// 等待组进入等待状态，等这两个goroutines完成任务</span><br>fmt.Println(x)<br>&#125;<br><span class="hljs-comment">// 输出为2000 </span><br></code></pre></td></tr></table></figure><h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><ul><li>场景：读多写少，读是不需要加锁的，写需要加锁</li><li>解决：读写互斥锁</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">- 当一个goroutine获取读锁之后，其他的goroutine如果是获取读锁会继续获得锁，如果是获取写锁，就会等待；<br>- 当一个<span class="hljs-string">`goroutine`</span>获取写锁之后，其他的<span class="hljs-string">`goroutine`</span>无论是获取读锁还是写锁都会等待<br></code></pre></td></tr></table></figure><h2 id="sync-Map-并发安全映射（Map）"><a href="#sync-Map-并发安全映射（Map）" class="headerlink" title="sync.Map 并发安全映射（Map）"></a>sync.Map 并发安全映射（Map）</h2><ul><li>Go内置的map 并不是并发安全的，所以高并发下使用sync.Map类型</li><li>sync.Map不需要使用make()分配内存，使用另一种便捷方式：Store&#x2F;Load等</li></ul><p>1、并发安全性：<code>sync.Map</code> 在多个goroutines之间提供了并发安全的读取和写入操作，这意味着你可以同时在多个goroutines中访问和修改同一个映射，而不需要额外的锁或者同步机制去限制</p><p>2、自动扩容：<code>sync.map</code>在需要时会自动扩容以适应更多的键值对，无需手动管理容量问题</p><p>3、性能优化：<code>sync.map</code>在内部使用了一些性能优化策略，以提高并发访问的性能</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// // 写入键值对</span><br><span class="hljs-comment">// m.Store(&quot;key1&quot;, &quot;value1&quot;)</span><br><span class="hljs-comment">// m.Store(&quot;key2&quot;, &quot;value2&quot;)</span><br><br><span class="hljs-comment">// // 读取键的值</span><br><span class="hljs-comment">// value, found := m.Load(&quot;key1&quot;)</span><br><span class="hljs-comment">// if found &#123;</span><br><span class="hljs-comment">// fmt.Println(&quot;Value:&quot;, value)</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// // 删除键值对</span><br><span class="hljs-comment">// // m.Delete(&quot;key2&quot;)</span><br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123; <span class="hljs-comment">// 循环10次，10个goroutine</span><br>wg3.Add(<span class="hljs-number">1</span>) <span class="hljs-comment">// 添加等待组，添加1个，循环了i遍</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> &#123;<br>key := strconv.Itoa(n) <span class="hljs-comment">//将n转化成字符串，用key接收，Itoa转换</span><br>m.Store(key, n)        <span class="hljs-comment">// 组装一个sync.Map 键是kyc字符串，值是n，所以就是 &quot;1&quot;:1这样的形式</span><br><span class="hljs-comment">//读取sync,Mao的内容，通过Key拿值，</span><br><span class="hljs-comment">// 下划线表示不处理那个返回值，Load会返回两个值，前面的是kyc对应的value，后面的是一个布尔值，有就真，无就假</span><br>value, _ := m.Load(key)<br>fmt.Println(value) <span class="hljs-comment">//打印的是key 的值</span><br>wg3.Done()         <span class="hljs-comment">// 结束这个等待组</span><br><br>&#125;(i)<br>wg3.Wait() <span class="hljs-comment">// 等待所有等待组完成</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go语言之接口(interface)</title>
    <link href="/2023/12/06/go%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%8E%A5%E5%8F%A3(interface)/"/>
    <url>/2023/12/06/go%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%8E%A5%E5%8F%A3(interface)/</url>
    
    <content type="html"><![CDATA[<h1 id="接口interface"><a href="#接口interface" class="headerlink" title="接口interface"></a>接口interface</h1><h2 id="关于接口的概念"><a href="#关于接口的概念" class="headerlink" title="关于接口的概念"></a>关于接口的概念</h2><ul><li><p>接口interface是定义了一组方法的集合，</p></li><li><p>接口提供了一种标准化的方式，用来规定对象的行为，。</p></li><li><p>通过接口，你定义了对象必须具备的方法。而不必关心对象的具体实现。这种抽象的方式，可以更加灵活和复用</p></li><li><p>通过定义接口interface，然后让对象来调用或者实现</p></li><li><p>接口interface可以作为函数的入参参数，也可以作为返回值 实现多态</p></li><li><p>接口Interface 是一种规范，是一种限制，</p></li></ul><p> <strong>当你把接口interface定义好后，作为入参，那你这个函数的入参，就必须有你定义的接口interface有的方法，不然就会报错，</strong></p><ul><li><p>同理你把interface类型的东西作为return出去的东西，那你就在定义return的对象时就必须定义他有哪些方法，</p></li><li><p>总的说，接口等同于python的基类，基类用于子类必须实现方法，接口也是子类必须实现方法。</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> animal <span class="hljs-keyword">interface</span> &#123; <span class="hljs-comment">//在定义接口interface类型，这个类型有一个say方法</span><br>say()<br>&#125;<br><span class="hljs-keyword">type</span> cat <span class="hljs-keyword">struct</span> &#123; <span class="hljs-comment">// 结构体</span><br>Name <span class="hljs-type">string</span><br>&#125;<br><span class="hljs-keyword">type</span> dog <span class="hljs-keyword">struct</span> &#123; <span class="hljs-comment">// 结构体</span><br>Name <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c cat)</span></span> say() &#123; <span class="hljs-comment">// 这个是方法，结构体的方法</span><br>fmt.Printf(<span class="hljs-string">&quot;%v小花猫，喵喵叫\n&quot;</span>, c.Name)<br>&#125;<br><br><span class="hljs-comment">// 这两个结构体都有say方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d dog)</span></span> say() &#123; <span class="hljs-comment">// 这个say也是方法，结构体的方法</span><br>fmt.Printf(<span class="hljs-string">&quot;%v小土狗，汪汪叫\n&quot;</span>, d.Name)<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">aaa</span><span class="hljs-params">(a animal)</span></span> <span class="hljs-type">string</span> &#123; <span class="hljs-comment">//这个方法的入参是一个animal接口类，所以传进来的参数必须要是animal类型，必须要有say方法</span><br>a.say()<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;aaa&quot;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bbb</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> animal &#123; <span class="hljs-comment">// 这是在定义一个返回值为interface接口类型的函数</span><br><span class="hljs-comment">//a.say()</span><br><span class="hljs-comment">//a.say()</span><br>c := cat&#123;<span class="hljs-string">&quot;小白&quot;</span>&#125;<br><span class="hljs-keyword">return</span> c<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>c := cat&#123;<span class="hljs-string">&quot;小白&quot;</span>&#125;    <span class="hljs-comment">//这个C是cat结构体的实例化对象</span><br>d := aaa(c)       <span class="hljs-comment">//这个d是函数aaa的实例化对象 需要传入参，入参就是C 且这个入参必须要有say方法，不然就会报错</span><br>fmt.Printf(d)     <span class="hljs-comment">//打印这个d，此时d是有返回值string的所以可以打印出来</span><br>e := bbb(<span class="hljs-string">&quot;hello&quot;</span>) <span class="hljs-comment">//这是在实例化bbb函数，e就是上面的c，是一个interface接口类型的。</span><br>e.say()           <span class="hljs-comment">// e是不可以直接打印的，因为你无法打印接口类型。但是你可以调用这个interface接口的方法</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="接口也是一种类型，可以定义变量"><a href="#接口也是一种类型，可以定义变量" class="headerlink" title="接口也是一种类型，可以定义变量"></a>接口也是一种类型，可以定义变量</h1><ul><li>结构体—结构体方法—接口</li><li>接口类型的变量，能够储存所有实现了该接口的结构体。</li><li>实例化一个变量（对象）</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> animal <span class="hljs-keyword">interface</span> &#123;<br>say()<br>&#125;<br><br><span class="hljs-keyword">type</span> cat <span class="hljs-keyword">struct</span> &#123;<br>Name <span class="hljs-type">string</span><br>&#125;<br><span class="hljs-keyword">type</span> dog <span class="hljs-keyword">struct</span> &#123;<br>Name <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c cat)</span></span> say() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%v小猫喵喵叫\n&quot;</span>, c.Name)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d dog)</span></span> say() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%v小狗汪汪叫\n&quot;</span>, d.Name)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> a animal<br>fmt.Printf(<span class="hljs-string">&quot;类型是:%T\n&quot;</span>, a)    <span class="hljs-comment">//打印的类型是nil 类型</span><br>fmt.Printf(<span class="hljs-string">&quot;打印的内容是:%v\n&quot;</span>, a) <span class="hljs-comment">// 这个a 是一个接口类型的实例化对象，所以打印是没有数据的 打印的是nil</span><br>c := cat&#123;<span class="hljs-string">&quot;小花&quot;</span>&#125;<br>a = c          <span class="hljs-comment">//这个时候把c赋值给了a，所以a有c的属性</span><br>fmt.Println(a) <span class="hljs-comment">//所以打印的时候，就可以打印a了，</span><br>a.say()<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="定义指针类型和值类型接收器实现接口"><a href="#定义指针类型和值类型接收器实现接口" class="headerlink" title="定义指针类型和值类型接收器实现接口"></a>定义指针类型和值类型接收器实现接口</h1><ul><li>值类型接口实现后，不管是结构体还是结构体指针的变量，都可以赋值给接口变量</li><li>只要是值接收器，修改的都是新的。</li><li>使用指针接收器实现接口之后，只能将结构体指针变量赋值给该接口变量</li><li>只要是指针接收器，修改的都是原来的。、</li></ul><p><strong>你在定义结构体方法的时候，将入参定义为指针类型入参即可，</strong></p><p><strong>这样你在实例化这个结构体的时候，传入指针类型即可</strong> </p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go语言之json、YAML的序列化和反序列化</title>
    <link href="/2023/12/06/11.1%20go%E8%AF%AD%E8%A8%80json%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/12/06/11.1%20go%E8%AF%AD%E8%A8%80json%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="11-1-json序列化"><a href="#11-1-json序列化" class="headerlink" title="11.1 json序列化"></a>11.1 json序列化</h1><p>Go语言中的序列化和反序列化是一种解码<strong>思路</strong></p><p>可以将结构体进行序列化为<strong>JSON字符串格式</strong>，</p><p><code>注意：不是将类型转化为JSON，go语言没有JSON格式类型，</code></p><p>是将数据，转化为 JSON格式风格的数据，供其他语言使用，</p><p>比如说，python中，也没有json这种数据格式，把一串json导入到Python，打印它的类型，打印出来就是string字符串类型，将json转化成字典，就是将字符串转成字典</p><p>带入到go语言中也是一样的概念，只是go语言可以通过结构体去转化成json(序列化)，变成一种键值对的格式（也有不是键值对格式的json）</p><p>go语言序列化（结构体转json）和反序列化的实现方式：通过json.Marshal(person) person就是结构体实例化的数据，json.Unmarshal(jsondata)就是反序列化（结构体转json）</p><p>结构体转JSON</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Myaccount <span class="hljs-keyword">struct</span> &#123;<br>Name   <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;name&quot;`</span><br>PWD    <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;pwd&quot;`</span><br>Amount <span class="hljs-type">int</span>    <span class="hljs-string">`json:&quot;amount&quot;`</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>account := Myaccount&#123;<span class="hljs-string">&quot;and&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-number">18</span>&#125;<br>fmt.Println(<span class="hljs-string">&quot;打印一下：&quot;</span>, account) <span class="hljs-comment">// 打印一下： &#123;and 123 18&#125;</span><br><span class="hljs-comment">// 序列化方法</span><br>data1, _ := json.Marshal(account)<br>    fmt.Println(<span class="hljs-string">&quot;序列化后的data1:&quot;</span>, <span class="hljs-type">string</span>(data1)) <span class="hljs-comment">// 序列化后的data1: &#123;&quot;name&quot;:&quot;and&quot;,&quot;pwd&quot;:&quot;123&quot;,&quot;amount&quot;:18&#125;</span><br>fmt.Printf(<span class="hljs-string">&quot;%T\n&quot;</span>, data1) <span class="hljs-comment">// 打印出来的类型是无符号8位整形[]uint8，无正负符号8位整形</span><br>data2, _ := json.MarshalIndent(account, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot; &quot;</span>)<span class="hljs-comment">// MarshalIndent带缩进</span><br><br>fmt.Println(<span class="hljs-string">&quot;序列化后的data2=&quot;</span>, <span class="hljs-type">string</span>(data2))    <span class="hljs-comment">// 序列化后的data2= &#123;</span><br> <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;and&quot;</span>,<br> <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;123&quot;</span>,<br> <span class="hljs-string">&quot;amount&quot;</span>: <span class="hljs-number">18</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;data2的格式是：%T\n&quot;</span>, data2) <span class="hljs-comment">// []uint8</span><br><span class="hljs-comment">// 反序列化方法，就用json.Unmarshal()方法</span><br><span class="hljs-keyword">var</span> account2 Myaccount <span class="hljs-comment">// 定义一个变量account2，类型是Myaccount结构体</span><br>json.Ummarshal(data1,&amp;account2)<br>fmt.Println(<span class="hljs-string">&quot;account2=&quot;</span>, account2)<span class="hljs-comment">// account2=&#123;and 123 18&#125; ,打印出来的就是结构体了</span><br>fmt.Printf(<span class="hljs-string">&quot;%T\n&quot;</span>, account2) <span class="hljs-comment">// 类型就是main.Myaccount</span><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 再写一个</span><br><span class="hljs-keyword">type</span> MyScore <span class="hljs-keyword">struct</span> &#123;<br>Name  <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;name&quot;`</span><br>Class <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;class&quot;`</span><br>Score <span class="hljs-type">int</span>    <span class="hljs-string">`json:&quot;score&quot;`</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    TomScore := MyScore&#123;<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;2班&quot;</span>, <span class="hljs-number">99</span>&#125;<br>fmt.Println(<span class="hljs-string">&quot;TomSocre=&quot;</span>, TomScore)<br><span class="hljs-comment">// 将TomScore进行序列化</span><br>JsonTomScore, _ := json.Marshal(TomScore)<br>fmt.Println(<span class="hljs-string">&quot;JsonTomScore=&quot;</span>, <span class="hljs-type">string</span>(JsonTomScore))<br><span class="hljs-comment">// 优化缩进后的</span><br>JsonTomScore2, _ := json.MarshalIndent(TomScore, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot; &quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;JsonTomScore2=&quot;</span>, <span class="hljs-type">string</span>(JsonTomScore2))<br><span class="hljs-comment">// 反序列化</span><br><span class="hljs-keyword">var</span> tom MyScore<br>json.Unmarshal(JsonTomScore, &amp;tom)<br>fmt.Println(<span class="hljs-string">&quot;tom=&quot;</span>, tom)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>序列化和反序列化，目前用到的是结构体类型数据转成json格式，和json格式转成结构体类型的数据</p></blockquote><h1 id="Yaml-序列化和反序列化（yaml与结构体互转）"><a href="#Yaml-序列化和反序列化（yaml与结构体互转）" class="headerlink" title="Yaml 序列化和反序列化（yaml与结构体互转）"></a>Yaml 序列化和反序列化（yaml与结构体互转）</h1><ul><li>思路和方式跟json的是一样的，只是用了一个库：**”gopkg.in&#x2F;yaml.v3”**</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;gopkg.in/yaml.v3&quot;</span><br><span class="hljs-string">&quot;io/ioutil&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> MyYAML <span class="hljs-keyword">struct</span> &#123;<br>Name  <span class="hljs-type">string</span> <span class="hljs-string">`yaml:&quot;name&quot;`</span><br>Age   <span class="hljs-type">int</span>    <span class="hljs-string">`yaml:&quot;age&quot;`</span><br>Email <span class="hljs-type">string</span> <span class="hljs-string">`yaml:&quot;email,omitempty&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 序列化yaml 和序列化json一样的  yaml.Marshal</span><br>YamlStruct := MyYAML&#123;<span class="hljs-string">&quot;andy&quot;</span>, <span class="hljs-number">11</span>, <span class="hljs-string">&quot;110@163.com&quot;</span>&#125;<br>fmt.Println(<span class="hljs-string">&quot;YamlStruct=&quot;</span>, YamlStruct)<br>YamlDate, _ := yaml.Marshal(YamlStruct)<br>fmt.Println(<span class="hljs-string">&quot;YamlDate=&quot;</span>, <span class="hljs-type">string</span>(YamlDate))<br><span class="hljs-comment">// 下面反序列化yaml,也是和json一样思路，yaml.UnMarshal</span><br><span class="hljs-comment">// 不过在这之前你要有一个yaml文件，读取这个yaml文件后才能去打印出来</span><br>yamlDataFile, err := ioutil.ReadFile(<span class="hljs-string">&quot;data.yml&quot;</span>) <span class="hljs-comment">// 读取yml文件</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Failed to read YAML file: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">var</span> MyYamlStruct MyYAML<br>err = yaml.Unmarshal(yamlDataFile, &amp;MyYamlStruct) <span class="hljs-comment">// 把数据赋值到结构体里，用指针，改变他的值</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Failed to unmarshal YAML: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-comment">// 打印数据出来，</span><br>fmt.Printf(<span class="hljs-string">&quot;Name: %s, Age: %d, Email: %s\n&quot;</span>, MyYamlStruct.Name, MyYamlStruct.Age, MyYamlStruct.Email)<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/12/05/hello-world/"/>
    <url>/2023/12/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
